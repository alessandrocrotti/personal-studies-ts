# Issuer per creare un vero certificato tramite Let's Encrypt (SOLO DI ESEMPIO)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: my-namespace
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: tuo@email.it
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
      - http01:
          ingress:
            class: traefik
---
# Issuer per creare un self-signed certificate
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: selfsigned-cluster-issuer
  namespace: my-namespace
spec:
  selfSigned: {}
---
# Ingress tramite traefik che espone il servizio per l'applicazione Nginx utilizzando il certificato self-signed
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: my-namespace
  annotations:
    # Questa annotazione indica a Traefik di usare il ClusterIssuer per generare un certificato TLS self-signed
    # Permette di evitare di creare manualmente un certificato e una secret
    cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
spec:
  ingressClassName: traefik
  tls:
    - hosts:
        - localhost
      # Viene creata una secret con il certificato TLS self-signed creato automaticamente tramite l'annotazione sopra
      secretName: nginx-tls
  rules:
    - host: localhost
      http:
        paths:
          # Questa regola instrada le richieste HTTP verso il servizio Nginx
          - path: /
            pathType: Prefix
            backend:
              # Il servizio backend che espone l'applicazione Nginx nella relativa porta
              service:
                name: nginx-service-with-ingress
                port:
                  number: 80
